/* Automatically generated by Amaranth 0.4.1.dev61+g115954b. Do not edit. */
/* Generated by Yosys 0.36+67 (git sha1 1ddb0892c, clang 14.0.0-1ubuntu1.1 -fPIC -Os) */

module top(clk125_0__io, led_0__io);
  reg \$auto$verilog_backend.cc:2189:dump_module$1  = 0;
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire [26:0] \$7 ;
  wire [26:0] \$8 ;
  (* keep = "TRUE" *)
  wire cd_sync_clk125_0__i;
  wire clk;
  input clk125_0__io;
  wire clk125_0__io;
  output led_0__io;
  wire led_0__io;
  reg pin_led_0_led_0__o = 1'h0;
  reg \pin_led_0_led_0__o$next ;
  wire rst;
  reg [25:0] timer = 26'h0000000;
  reg [25:0] \timer$next ;
  always @(posedge clk)
    pin_led_0_led_0__o <= \pin_led_0_led_0__o$next ;
  always @(posedge clk)
    timer <= \timer$next ;
  assign \$1  = timer == 26'h3b9aca0;
  assign \$3  = ~ pin_led_0_led_0__o;
  assign \$5  = timer == 26'h3b9aca0;
  assign \$8  = timer + 1'h1;
  \top.cd_sync  cd_sync (
    .clk(clk),
    .clk125_0__i(cd_sync_clk125_0__i),
    .rst(rst)
  );
  \top.pin_clk125_0  pin_clk125_0 (
    .clk125_0__i(cd_sync_clk125_0__i),
    .clk125_0__io(clk125_0__io)
  );
  \top.pin_led_0  pin_led_0 (
    .led_0__io(led_0__io),
    .led_0__o(pin_led_0_led_0__o)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2189:dump_module$1 ) begin end
    \pin_led_0_led_0__o$next  = pin_led_0_led_0__o;
    casez (\$1 )
      1'h1:
          \pin_led_0_led_0__o$next  = \$3 ;
    endcase
    casez (rst)
      1'h1:
          \pin_led_0_led_0__o$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2189:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (\$5 )
      1'h1:
          \timer$next  = 26'h0000000;
      default:
          \timer$next  = \$8 [25:0];
    endcase
    casez (rst)
      1'h1:
          \timer$next  = 26'h0000000;
    endcase
  end
  assign \$7  = \$8 ;
endmodule

module \top.cd_sync (clk, clk125_0__i, rst);
  output clk;
  wire clk;
  (* keep = "TRUE" *)
  input clk125_0__i;
  wire clk125_0__i;
  output rst;
  wire rst;
  \top.cd_sync.reset_sync  reset_sync (
    .clk(clk),
    .rst(rst)
  );
  assign clk = clk125_0__i;
endmodule

module \top.cd_sync.reset_sync (clk, rst);
  reg \$auto$verilog_backend.cc:2189:dump_module$2  = 0;
  wire async_ff_clk;
  wire async_ff_rst;
  input clk;
  wire clk;
  output rst;
  wire rst;
  (* ASYNC_REG = "TRUE" *)
  reg stage0 = 1'h1;
  reg \stage0$next ;
  (* ASYNC_REG = "TRUE" *)
  reg stage1 = 1'h1;
  reg \stage1$next ;
  wire _0_ = 1'h0;
  always @(posedge async_ff_clk, posedge _0_)
    if (_0_) stage0 <= 1'h1;
    else stage0 <= \stage0$next ;
  wire _1_ = 1'h0;
  always @(posedge async_ff_clk, posedge _1_)
    if (_1_) stage1 <= 1'h1;
    else stage1 <= \stage1$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2189:dump_module$2 ) begin end
    \stage0$next  = 1'h0;
    casez (async_ff_rst)
      1'h1:
          \stage0$next  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2189:dump_module$2 ) begin end
    \stage1$next  = stage0;
    casez (async_ff_rst)
      1'h1:
          \stage1$next  = 1'h1;
    endcase
  end
  assign rst = stage1;
  assign async_ff_clk = clk;
  assign async_ff_rst = 1'h0;
endmodule

module \top.pin_clk125_0 (clk125_0__io, clk125_0__i);
  (* keep = "TRUE" *)
  output clk125_0__i;
  wire clk125_0__i;
  input clk125_0__io;
  wire clk125_0__io;
  IBUF clk125_0_0 (
    .I(clk125_0__io),
    .O(clk125_0__i)
  );
endmodule

module \top.pin_led_0 (led_0__io, led_0__o);
  output led_0__io;
  wire led_0__io;
  input led_0__o;
  wire led_0__o;
  assign led_0__io = led_0__o;
endmodule
